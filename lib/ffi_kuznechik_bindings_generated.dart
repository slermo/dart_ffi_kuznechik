// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ffi_kuznechik.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FfiKuznechikBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FfiKuznechikBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FfiKuznechikBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// init lookup tables
  void kuz_init() {
    return _kuz_init();
  }

  late final _kuz_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('kuz_init');
  late final _kuz_init = _kuz_initPtr.asFunction<void Function()>();

  /// key setup
  void kuz_set_encrypt_key(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _kuz_set_encrypt_key(
      subkeys,
      key,
    );
  }

  late final _kuz_set_encrypt_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Uint8>)>>('kuz_set_encrypt_key');
  late final _kuz_set_encrypt_key = _kuz_set_encrypt_keyPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Uint8>)>();

  void kuz_set_decrypt_key(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _kuz_set_decrypt_key(
      subkeys,
      key,
    );
  }

  late final _kuz_set_decrypt_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Uint8>)>>('kuz_set_decrypt_key');
  late final _kuz_set_decrypt_key = _kuz_set_decrypt_keyPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Uint8>)>();

  /// single-block ecp ops
  void kuz_encrypt_block(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _kuz_encrypt_block(
      subkeys,
      x,
    );
  }

  late final _kuz_encrypt_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Void>)>>('kuz_encrypt_block');
  late final _kuz_encrypt_block = _kuz_encrypt_blockPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Void>)>();

  void kuz_decrypt_block(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _kuz_decrypt_block(
      subkeys,
      x,
    );
  }

  late final _kuz_decrypt_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Void>)>>('kuz_decrypt_block');
  late final _kuz_decrypt_block = _kuz_decrypt_blockPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Void>)>();
}

/// my 128-bit datatype
final class w128_t extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> q;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> b;
}

/// cipher context
final class kuz_key_t extends ffi.Struct {
  /// round keys
  @ffi.Array.multi([10])
  external ffi.Array<w128_t> k;
}
