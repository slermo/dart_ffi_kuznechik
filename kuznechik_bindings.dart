// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class Kuznechik {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Kuznechik(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Kuznechik.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void kuz_init() {
    return _kuz_init();
  }

  late final _kuz_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('kuz_init');
  late final _kuz_init = _kuz_initPtr.asFunction<void Function()>();

  void kuz_set_encrypt_key(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _kuz_set_encrypt_key(
      subkeys,
      key,
    );
  }

  late final _kuz_set_encrypt_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Uint8>)>>('kuz_set_encrypt_key');
  late final _kuz_set_encrypt_key = _kuz_set_encrypt_keyPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Uint8>)>();

  void kuz_set_decrypt_key(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _kuz_set_decrypt_key(
      subkeys,
      key,
    );
  }

  late final _kuz_set_decrypt_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Uint8>)>>('kuz_set_decrypt_key');
  late final _kuz_set_decrypt_key = _kuz_set_decrypt_keyPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Uint8>)>();

  void kuz_encrypt_block(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _kuz_encrypt_block(
      subkeys,
      x,
    );
  }

  late final _kuz_encrypt_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Void>)>>('kuz_encrypt_block');
  late final _kuz_encrypt_block = _kuz_encrypt_blockPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Void>)>();

  void kuz_decrypt_block(
    ffi.Pointer<kuz_key_t> subkeys,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _kuz_decrypt_block(
      subkeys,
      x,
    );
  }

  late final _kuz_decrypt_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<kuz_key_t>,
              ffi.Pointer<ffi.Void>)>>('kuz_decrypt_block');
  late final _kuz_decrypt_block = _kuz_decrypt_blockPtr.asFunction<
      void Function(ffi.Pointer<kuz_key_t>, ffi.Pointer<ffi.Void>)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class w128_t extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> q;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> b;
}

final class kuz_key_t extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<w128_t> k;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;
